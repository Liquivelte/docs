import{_ as s,c as a,o as n,a as l}from"./app.cda77f0c.js";const u=JSON.parse(`{"title":"Anatomie of a Liquivelte Component","description":"","frontmatter":{},"headers":[{"level":2,"title":"Expressions are liquid like but always with a hyphen","slug":"expressions-are-liquid-like-but-always-with-a-hyphen","link":"#expressions-are-liquid-like-but-always-with-a-hyphen","children":[]},{"level":2,"title":"Expressions have some liquid filters available","slug":"expressions-have-some-liquid-filters-available","link":"#expressions-have-some-liquid-filters-available","children":[]},{"level":2,"title":"Control flow tags are liquid like","slug":"control-flow-tags-are-liquid-like","link":"#control-flow-tags-are-liquid-like","children":[]},{"level":2,"title":"Can have {% liquid ... %} at the top of the component","slug":"can-have-liquid-at-the-top-of-the-component","link":"#can-have-liquid-at-the-top-of-the-component","children":[]},{"level":2,"title":"Can import variables from 'theme'","slug":"can-import-variables-from-theme","link":"#can-import-variables-from-theme","children":[]},{"level":2,"title":"Can also import 1st depth object properties from 'theme'","slug":"can-also-import-1st-depth-object-properties-from-theme","link":"#can-also-import-1st-depth-object-properties-from-theme","children":[]}],"relativePath":"anatomie-of-component.md"}`),e={name:"anatomie-of-component.md"},o=l(`<h1 id="anatomie-of-a-liquivelte-component" tabindex="-1">Anatomie of a Liquivelte Component <a class="header-anchor" href="#anatomie-of-a-liquivelte-component" aria-hidden="true">#</a></h1><p>Anatomie of a liquivelte component is very similar to a Svelte Component with a few exceptions. Template part is mostly liquid and should be valid.</p><p>Meaning 2 contexts should match, for ex if you have a <code>product</code> variable in product page template, you also should have <code>product</code> imported into js context because Svelte will do some renders with the data we provide.</p><p>All the point here is to get SSR html via liquid and Svelte hydrates the markup when page loads.</p><h2 id="expressions-are-liquid-like-but-always-with-a-hyphen" tabindex="-1">Expressions are liquid like but always with a hyphen <a class="header-anchor" href="#expressions-are-liquid-like-but-always-with-a-hyphen" aria-hidden="true">#</a></h2><p>For ex in a svelte component you would output an expression like this.</p><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; { count } &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>In liquivelte you do it like liquid but always with hyphens.</p><div class="language-liquivelte"><button title="Copy Code" class="copy"></button><span class="lang">liquivelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> &gt; {{- count -}} &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>Why hyphens are necessary?</summary><div><p>The reason for the hyphens is <code>{{ ... }}</code> is a valid svelte expression outputting an object. You can use svelte expressions as well if you do not care about the initial rendering of that part.</p></div></details><details class="details custom-block"><summary>What happens if I just use { ... }?</summary><div><p>Nothing, when page loads liquid will output { ... } without any evaluation and then Svelte will replace it with evaluated value when hydrating. If it is something that is not visible on load, it does not matter. Actually if you are going for lets say a popup that opens on click, you can import that as a Svelte component and pass values to it from props.</p></div></details><h2 id="expressions-have-some-liquid-filters-available" tabindex="-1">Expressions have some liquid filters available <a class="header-anchor" href="#expressions-have-some-liquid-filters-available" aria-hidden="true">#</a></h2><p>Expressions that are with hyphens are subject to a transformation, which also transforms liquid filters to function calls of a special import <code>liquid</code>. Example:</p><div class="language-liquivelte"><button title="Copy Code" class="copy"></button><span class="lang">liquivelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text-theme text-base&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {{- product.price | money -}}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"></span></code></pre></div><p>gets transformed into</p><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text-theme text-base&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  { liquid.</span><span style="color:#B392F0;">money</span><span style="color:#E1E4E8;">(product.price) }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"></span></code></pre></div><h2 id="control-flow-tags-are-liquid-like" tabindex="-1">Control flow tags are liquid like <a class="header-anchor" href="#control-flow-tags-are-liquid-like" aria-hidden="true">#</a></h2><div class="language-liquivelte"><button title="Copy Code" class="copy"></button><span class="lang">liquivelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{% </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> section.settings.logo </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> blank %}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{{-</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">section</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">settings</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">logo</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">-}}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alt</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Store logo&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{% </span><span style="color:#F97583;">endif</span><span style="color:#E1E4E8;"> %}</span></span>
<span class="line"></span></code></pre></div><p>This will transform into:</p><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{#</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> section.settings.logo </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#9ECBFF;">{- section.settings.logo -}</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alt</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Store logo&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{/</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="can-have-liquid-at-the-top-of-the-component" tabindex="-1">Can have <code>{% liquid ... %}</code> at the top of the component <a class="header-anchor" href="#can-have-liquid-at-the-top-of-the-component" aria-hidden="true">#</a></h2><p>This liquid code will end up in liquid part only. For example we can calculate something in liquid to import later.</p><div class="language-liquivelte"><button title="Copy Code" class="copy"></button><span class="lang">liquivelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{% </span><span style="color:#F97583;">liquid</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  if block</span></span>
<span class="line"><span style="color:#E1E4E8;">    assign settings = block.settings</span></span>
<span class="line"><span style="color:#E1E4E8;">  else</span></span>
<span class="line"><span style="color:#E1E4E8;">    assign settings = section.settings</span></span>
<span class="line"><span style="color:#E1E4E8;">  endif</span></span>
<span class="line"><span style="color:#E1E4E8;">%}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> settings </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;theme&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> section.blocks </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;theme&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">block</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">.product-card</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">background-color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#ddd</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;product-card&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {% </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> product.available %}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Badge</span><span style="color:#E1E4E8;">&gt; In Stock &lt;/</span><span style="color:#79B8FF;">Badge</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {% </span><span style="color:#F97583;">endif</span><span style="color:#E1E4E8;"> %}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="can-import-variables-from-theme" tabindex="-1">Can import variables from &#39;theme&#39; <a class="header-anchor" href="#can-import-variables-from-theme" aria-hidden="true">#</a></h2><p>If you import something from <code>&#39;theme&#39;</code>, it will output that liquid variable to page with <code>| json</code> filter and pass it to Svelte when initializing the component.</p><h2 id="can-also-import-1st-depth-object-properties-from-theme" tabindex="-1">Can also import 1st depth object properties from &#39;theme&#39; <a class="header-anchor" href="#can-also-import-1st-depth-object-properties-from-theme" aria-hidden="true">#</a></h2><p>Some big objects are not json serializable in Shopify liquid. For example lets say <code>section</code>, you can import <code>section.settings</code> instead of <code>section</code>. However defining section in the javascript context is on you.</p><p>For example:</p><div class="language-liquivelte"><button title="Copy Code" class="copy"></button><span class="lang">liquivelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> section.settings </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;theme&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Will throw an error because <code>section</code> is not defined. Do this instead:</p><div class="language-liquivelte"><button title="Copy Code" class="copy"></button><span class="lang">liquivelte</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">section</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> section.settings </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;theme&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,31),t=[o];function p(i,c,r,E,d,y){return n(),a("div",null,t)}const m=s(e,[["render",p]]);export{u as __pageData,m as default};
